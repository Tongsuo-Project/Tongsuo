# Generated with generate_ssl_tests.pl

num_tests = 19

test-0 = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only
test-1 = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only
test-2 = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode
test-3 = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode
test-4 = 4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode
test-5 = 5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode
test-6 = 6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode
test-7 = 7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode
test-8 = 8-test ntls client doing handshake without setting certs and pkey
test-9 = 9-test server encryption certificate expired
test-10 = 10-test server sign certificate expired
test-11 = 11-test server certificates expired
test-12 = 12-test server choose ECC-SM2-SM4 with SM2 double certs only
test-13 = 13-test server choose RSA-SM4 with RSA double certs only
test-14 = 14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs
test-15 = 15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs
test-16 = 16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs
test-17 = 17-test ntls client handshake with server which has set enable_force_ntls
test-18 = 18-test tls client handshake with server which has set enable_force_ntls
# ===========================================================

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only]
ssl_conf = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl]
server = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server
client = 0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[0-test cipher ECC-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client]
CipherString = ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-0]
ExpectedCipher = ECC-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only]
ssl_conf = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-ssl]
server = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server
client = 1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[1-test cipher ECC-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode, NTLS_UNIQUE test server and client all use NTLS only-client]
CipherString = ECC-SM2-SM4-GCM-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-1]
ExpectedCipher = ECC-SM2-SM4-GCM-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode]
ssl_conf = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl]
server = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-server
client = 2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-client

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt

[2-test cipher ECDHE-SM2-SM4-CBC-SM3 in NTLS_UNIQUE mode-client]
CipherString = ECDHE-SM2-SM4-CBC-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/client_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/client_enc.key
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/client_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/client_sign.key
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-2]
ExpectedCipher = ECDHE-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode]
ssl_conf = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl]
server = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-server
client = 3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-client

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt

[3-test cipher ECDHE-SM2-SM4-GCM-SM3 in NTLS_UNIQUE mode-client]
CipherString = ECDHE-SM2-SM4-GCM-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/client_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/client_enc.key
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/client_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/client_sign.key
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-3]
ExpectedCipher = ECDHE-SM2-SM4-GCM-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode]
ssl_conf = 4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl

[4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-ssl]
server = 4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-server
client = 4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-client

[4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key

[4-test cipher RSA-SM4-CBC-SM3 in NTLS_UNIQUE mode-client]
CipherString = RSA-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-4]
ExpectedCipher = RSA-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode]
ssl_conf = 5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl

[5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-ssl]
server = 5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-server
client = 5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-client

[5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key

[5-test cipher RSA-SM4-GCM-SM3 in NTLS_UNIQUE mode-client]
CipherString = RSA-SM4-GCM-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-5]
ExpectedCipher = RSA-SM4-GCM-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode]
ssl_conf = 6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-ssl

[6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-ssl]
server = 6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-server
client = 6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-client

[6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key

[6-test cipher RSA-SM4-CBC-SHA256 in NTLS_UNIQUE mode-client]
CipherString = RSA-SM4-CBC-SHA256
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-6]
ExpectedCipher = RSA-SM4-CBC-SHA256
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode]
ssl_conf = 7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-ssl

[7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-ssl]
server = 7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-server
client = 7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-client

[7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key

[7-test cipher RSA-SM4-GCM-SHA256 in NTLS_UNIQUE mode-client]
CipherString = RSA-SM4-GCM-SHA256
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-7]
ExpectedCipher = RSA-SM4-GCM-SHA256
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[8-test ntls client doing handshake without setting certs and pkey]
ssl_conf = 8-test ntls client doing handshake without setting certs and pkey-ssl

[8-test ntls client doing handshake without setting certs and pkey-ssl]
server = 8-test ntls client doing handshake without setting certs and pkey-server
client = 8-test ntls client doing handshake without setting certs and pkey-client

[8-test ntls client doing handshake without setting certs and pkey-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[8-test ntls client doing handshake without setting certs and pkey-client]
CipherString = ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-8]
ExpectedResult = ServerFail
Method = NTLS


# ===========================================================

[9-test server encryption certificate expired]
ssl_conf = 9-test server encryption certificate expired-ssl

[9-test server encryption certificate expired-ssl]
server = 9-test server encryption certificate expired-server
client = 9-test server encryption certificate expired-client

[9-test server encryption certificate expired-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc_expire.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[9-test server encryption certificate expired-client]
CipherString = DEFAULT
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-9]
ExpectedClientAlert = CertificateExpired
ExpectedResult = ClientFail
Method = NTLS


# ===========================================================

[10-test server sign certificate expired]
ssl_conf = 10-test server sign certificate expired-ssl

[10-test server sign certificate expired-ssl]
server = 10-test server sign certificate expired-server
client = 10-test server sign certificate expired-client

[10-test server sign certificate expired-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign_expire.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[10-test server sign certificate expired-client]
CipherString = DEFAULT
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-10]
ExpectedClientAlert = CertificateExpired
ExpectedResult = ClientFail
Method = NTLS


# ===========================================================

[11-test server certificates expired]
ssl_conf = 11-test server certificates expired-ssl

[11-test server certificates expired-ssl]
server = 11-test server certificates expired-server
client = 11-test server certificates expired-client

[11-test server certificates expired-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc_expire.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign_expire.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[11-test server certificates expired-client]
CipherString = DEFAULT
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-11]
ExpectedClientAlert = CertificateExpired
ExpectedResult = ClientFail
Method = NTLS


# ===========================================================

[12-test server choose ECC-SM2-SM4 with SM2 double certs only]
ssl_conf = 12-test server choose ECC-SM2-SM4 with SM2 double certs only-ssl

[12-test server choose ECC-SM2-SM4 with SM2 double certs only-ssl]
server = 12-test server choose ECC-SM2-SM4 with SM2 double certs only-server
client = 12-test server choose ECC-SM2-SM4 with SM2 double certs only-client

[12-test server choose ECC-SM2-SM4 with SM2 double certs only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = RSA-SM4-CBC-SM3:ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[12-test server choose ECC-SM2-SM4 with SM2 double certs only-client]
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-12]
ExpectedCipher = ECC-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[13-test server choose RSA-SM4 with RSA double certs only]
ssl_conf = 13-test server choose RSA-SM4 with RSA double certs only-ssl

[13-test server choose RSA-SM4 with RSA double certs only-ssl]
server = 13-test server choose RSA-SM4 with RSA double certs only-server
client = 13-test server choose RSA-SM4 with RSA double certs only-client

[13-test server choose RSA-SM4 with RSA double certs only-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key

[13-test server choose RSA-SM4 with RSA double certs only-client]
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-13]
ExpectedCipher = RSA-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs]
ssl_conf = 14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-ssl

[14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-ssl]
server = 14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-server
client = 14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-client

[14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RSA.EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
RSA.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
RSA.SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
RSA.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key
SM2.EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
SM2.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
SM2.SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SM2.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[14-test server choose the preferred cipher ECC-SM2 with SM2 and RSA double certs-client]
CipherString = RSA-SM4-CBC-SM3:ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-14]
ExpectedCipher = ECC-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs]
ssl_conf = 15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-ssl

[15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-ssl]
server = 15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-server
client = 15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-client

[15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = RSA-SM4-CBC-SM3:ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RSA.EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
RSA.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
RSA.SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
RSA.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key
SM2.EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
SM2.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
SM2.SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SM2.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[15-test server choose the preferred cipher RSA-SM4 with SM2 and RSA double certs-client]
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Peer

[test-15]
ExpectedCipher = RSA-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs]
ssl_conf = 16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-ssl

[16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-ssl]
server = 16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-server
client = 16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-client

[16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = RSA-SM4-CBC-SM3:ECC-SM2-SM4-CBC-SM3
Enable_ntls = on
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RSA.EncCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.crt
RSA.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-enc.key
RSA.SignCertificate = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.crt
RSA.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/server-rsa-sign.key
SM2.EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
SM2.EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
SM2.SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SM2.SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[16-test server choose the client preferred cipher RSA-SM4 with SM2 and RSA double certs-client]
CipherString = ECC-SM2-SM4-CBC-SM3:RSA-SM4-CBC-SM3
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-16]
ExpectedCipher = ECC-SM2-SM4-CBC-SM3
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[17-test ntls client handshake with server which has set enable_force_ntls]
ssl_conf = 17-test ntls client handshake with server which has set enable_force_ntls-ssl

[17-test ntls client handshake with server which has set enable_force_ntls-ssl]
server = 17-test ntls client handshake with server which has set enable_force_ntls-server
client = 17-test ntls client handshake with server which has set enable_force_ntls-client

[17-test ntls client handshake with server which has set enable_force_ntls-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_force_ntls = on
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[17-test ntls client handshake with server which has set enable_force_ntls-client]
CipherString = DEFAULT
Enable_ntls = on
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2/chain-ca.crt
VerifyMode = Peer

[test-17]
ExpectedProtocol = NTLS
ExpectedResult = Success
Method = NTLS


# ===========================================================

[18-test tls client handshake with server which has set enable_force_ntls]
ssl_conf = 18-test tls client handshake with server which has set enable_force_ntls-ssl

[18-test tls client handshake with server which has set enable_force_ntls-ssl]
server = 18-test tls client handshake with server which has set enable_force_ntls-server
client = 18-test tls client handshake with server which has set enable_force_ntls-client

[18-test tls client handshake with server which has set enable_force_ntls-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Enable_force_ntls = on
Enable_ntls = on
EncCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.crt
EncPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_enc.key
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
SignCertificate = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.crt
SignPrivateKey = ${ENV::TEST_CERTS_DIR}/sm2/server_sign.key

[18-test tls client handshake with server which has set enable_force_ntls-client]
CipherString = DEFAULT
Enable_ntls = off
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-18]
ExpectedResult = ServerFail
Method = TLS


