=pod

=head1 NAME

EVP_KDF_PBKDF2 - The PBKDF2 EVP_KDF implementation

=head1 DESCRIPTION

Support for computing the B<PBKDF2> password-based KDF through the B<EVP_KDF>
API.

The EVP_KDF_PBKDF2 algorithm implements the PBKDF2 password-based key
derivation function, as described in RFC 2898; it derives a key from a password
using a salt and iteration count.

=head2 Numeric identity

B<EVP_KDF_PBKDF2> is the numeric identity for this implementation; it
can be used with the EVP_KDF_CTX_new_id() function.

=head2 Supported controls

The supported controls are:

=over 4

=item B<EVP_KDF_CTRL_SET_PASS>

=item B<EVP_KDF_CTRL_SET_SALT>

=item B<EVP_KDF_CTRL_SET_ITER>

=item B<EVP_KDF_CTRL_SET_MD>

These controls work as described in L<EVP_KDF_CTX(3)/CONTROLS>.

B<iter> is the iteration count and its value should be greater than or equal to
1. RFC 2898 suggests an iteration count of at least 1000.  The default value is
2048.  Any B<iter> less than 1 is treated as a single iteration.

=back

=head1 NOTES

A typical application of this algorithm is to derive keying material for an
encryption algorithm from a password in the B<pass>, a salt in B<salt>,
and an iteration count.

Increasing the B<iter> parameter slows down the algorithm which makes it
harder for an attacker to perform a brute force attack using a large number
of candidate passwords.

No assumption is made regarding the given password; it is simply treated as a
byte sequence.

=head1 CONFORMING TO

RFC 2898

=head1 SEE ALSO

L<EVP_KDF_CTX>,
L<EVP_KDF_CTX_new_id(3)>,
L<EVP_KDF_CTX_free(3)>,
L<EVP_KDF_ctrl(3)>,
L<EVP_KDF_derive(3)>,
L<EVP_KDF_CTX(3)/CONTROLS>

=head1 COPYRIGHT

Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
