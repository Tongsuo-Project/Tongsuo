=pod

=head1 NAME

EVP_KDF_SS - The Single Step / One Step EVP_KDF implementation

=head1 DESCRIPTION

The EVP_KDF_SS algorithm implements the Single Step key derivation function (SSKDF).
SSKDF derives a key using input such as a shared secret key (that was generated
during the execution of a key establishment scheme) and fixedinfo.
SSKDF is also informally referred to as 'Concat KDF'.

=head2 Auxilary function

The implementation uses a selectable auxiliary function H, which can be in the
backported version only a:

=over 4

=item B<H(x) = hash(x, digest=md)>

=back

=head2 Numeric identity

B<EVP_KDF_SS> is the numeric identity for this implementation; it
can be used with the EVP_KDF_CTX_new_id() function.

=head2 Supported controls

The supported controls are:

=over 4

=item B<EVP_KDF_CTRL_SET_MD>

This control works as described in L<EVP_KDF_CTX(3)/CONTROLS>.

=item B<EVP_KDF_CTRL_SET_KEY>

This control expects two arguments: C<unsigned char *secret>, C<size_t secretlen>

The shared secret used for key derivation.  This control sets the secret.

EVP_KDF_ctrl_str() takes two type strings for this control:

=over 4

=item "secret"

The value string is used as is.

=item "hexsecret"

The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.

=back

=item B<EVP_KDF_CTRL_SET_SSKDF_INFO>

This control expects two arguments: C<unsigned char *info>, C<size_t infolen>

An optional value for fixedinfo, also known as otherinfo. This control sets the fixedinfo.

EVP_KDF_ctrl_str() takes two type strings for this control:

=over 4

=item "info"

The value string is used as is.

=item "hexinfo"

The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.

=back

=back

=head1 NOTES

A context for SSKDF can be obtained by calling:

EVP_KDF_CTX *kctx = EVP_KDF_CTX_new_id(EVP_KDF_SS);

The output length of an SSKDF is specified via the C<keylen>
parameter to the L<EVP_KDF_derive(3)> function.

=head1 EXAMPLES

This example derives 10 bytes using H(x) = SHA-256, with the secret key "secret"
and fixedinfo value "label":

  EVP_KDF_CTX *kctx;
  unsigned char out[10];

  kctx = EVP_KDF_CTX_new_id(EVP_KDF_SS);

  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_MD, EVP_sha256()) <= 0) {
      error("EVP_KDF_CTRL_SET_MD");
  }
  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KEY, "secret", (size_t)6) <= 0) {
      error("EVP_KDF_CTRL_SET_KEY");
  }
  if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_SSKDF_INFO, "label", (size_t)5) <= 0) {
      error("EVP_KDF_CTRL_SET_SSKDF_INFO");
  }
  if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0) {
      error("EVP_KDF_derive");
  }

  EVP_KDF_CTX_free(kctx);

=head1 CONFORMING TO

NIST SP800-56Cr1.

=head1 SEE ALSO

L<EVP_KDF_CTX>,
L<EVP_KDF_CTX_new_id(3)>,
L<EVP_KDF_CTX_free(3)>,
L<EVP_KDF_ctrl(3)>,
L<EVP_KDF_size(3)>,
L<EVP_KDF_derive(3)>,
L<EVP_KDF_CTX(3)/CONTROLS>

=head1 HISTORY

This functionality was added to OpenSSL 3.0.0.

=head1 COPYRIGHT

Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.  Copyright
(c) 2019, Oracle and/or its affiliates.  All rights reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
