=pod

=head1 NAME

EVP_KDF_KRB5KDF - The RFC3961 Krb5 KDF EVP_KDF implementation

=head1 DESCRIPTION

Support for computing the B<KRB5KDF> KDF through the B<EVP_KDF> API.

The B<EVP_KDF_KRB5KDF> algorithm implements the key derivation function defined
in RFC 3961, section 5.1 and is used by Krb5 to derive session keys.
Three inputs are required to perform key derivation: a cipher, (for example
AES-128-CBC), the initial key, and a constant.

=head2 Numeric identity

B<EVP_KDF_KRB5KDF> is the numeric identity for this implementation; it can be used with the
EVP_KDF_CTX_new_id() function.

=head2 Supported controls

The supported controls are:

=over 4

=item B<EVP_KDF_CTRL_SET_CIPHER>

=item B<EVP_KDF_CTRL_SET_KEY>

These controls work as described in L<EVP_KDF_CTX(3)/CONTROLS>.

=item B<EVP_KDF_CTRL_SET_KRB5KDF_CONSTANT>

This control expects two arguments: C<unsigned char *constant>, C<size_t constantlen>

This control sets the I<constant> value for the KDF.
If a value is already set, the contents are replaced.

=back


=head1 NOTES

A context for KRB5KDF can be obtained by calling:

 EVP_KDF_CTX *kctx = EVP_KDF_CTX_new_id(EVP_KDF_KRB5KDF);

The output length of the KRB5KDF derivation is specified via the I<keylen>
parameter to the L<EVP_KDF_derive(3)> function, and MUST match the key
length for the chosen cipher or an error is returned. Moreover the
I<constant>'s length must not exceed the block size of the cipher.
Since the KRB5KDF output length depends on the chosen cipher, calling
L<EVP_KDF_size()> to obtain the requisite length returns the correct length
only after the cipher is set. Prior to that B<EVP_MAX_KEY_LENGTH> is returned.
The caller must allocate a buffer of the correct length for the chosen
cipher, and pass that buffer to the L<EVP_KDF_derive(3)> function along
with that length.

=head1 EXAMPLES

This example derives a key using the AES-128-CBC cipher:

 EVP_KDF_CTX *kctx;
 unsigned char key[16] = "01234...";
 unsigned char constant[] = "I'm a constant";
 unsigned char out[16];
 size_t outlen = sizeof(out);

 kctx = EVP_KDF_CTX_new_id(EVP_KDF_KRB5KDF);

 EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_CIPHER, EVP_aes_128_cbc());
 EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KEY, key, (size_t)16);
 EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KRB5KDF_CONSTANT, constant, strlen(constant));
 if (EVP_KDF_derive(kctx, out, outlen) <= 0)
     /* Error */
 EVP_KDF_CTX_free(kctx);

=head1 CONFORMING TO

RFC 3961

=head1 SEE ALSO

L<EVP_KDF_CTX(3)>,
L<EVP_KDF_CTX_new_id(3)>,
L<EVP_KDF_CTX_free(3)>,
L<EVP_KDF_ctrl(3)>,
L<EVP_KDF_size(3)>,
L<EVP_KDF_derive(3)>,
L<EVP_KDF_CTX(3)/CONTROLS>

=head1 HISTORY

This functionality was added to OpenSSL 3.0.

=head1 COPYRIGHT

Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut

